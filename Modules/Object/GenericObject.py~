import pygame
from Modules.Object.ObjectLoader import Loader

class GenericObject():
        '''
        GENERIC CLASS, ALL OBJECT BEHAVIOUR TO BE DERIVED FROM THAT
        
        this is a root object, which keeps the track of it's childen.
        this may be equal to a SpriteGroup class in pyGame
        '''
        def __init__(self, parts):
                '''
                object creation procedure
                
                Arguments:
                - parts: the parts of an object of type GenericObjectPart
                '''
                #self.group = pygame.sprite.Group()
                
                # Adds all the sprites to a current group
                #self.group.add(parts)
                
                self.parts = parts
                
                self.rect = self.bounding_box()
                
                self.surface = pygame.Surface ( self.rect ) 
                
                for part in parts:
                        part.parent = self
                
                '''
                How is it better to load the objects???
                '''
        
        def bounding_box(self):
                '''
                recalculates the bounding box of an Object
                
                return: Rect meaning the boundary of the surface
                '''
                x,y,w,h=0,0,0,0
                for part in parts:
                        if part.rect.x < x:
                                x = part.rect.x
                        if part.rect.y < y:
                                y = part.rect.y
                        if part.rect.w+x > w:
                                w = part.rect.w+x
                        if prt.rect.h+y > h:
                                h = part.rect.h+y
                
                return pygame.Rect(x,y,w,h)
 
        def center_of_mass(self):
                pass


        def recalc_mc(self):
                '''
                recalculates the current center of mass
                '''
                pass
                
        def apply_force(self, v):
                '''
                applies the force defined by v 
                '''
                pass
                
class GenericObjectPart(pygame.sprite.Sprite):
        '''
        GENERIC CLASS, ALL OBJECT PART BEHAVIOUR TO BE DERIVED FROM THIS
        '''
        def __init__(self, info, custominfo):
                '''
                object creation procedure
                
                Arguments:
                - name: name of the object
                - HP: hit points amount
                - mass: mass of the object
                - rect: rectangle of collision for this kind of object
                - sprites: loaded sprites
                '''
                self.name = info['name']
                self.type = info['type']
                self.HP = info['HP']
                self.mass = info['mass']
                self.rect = info.images[0].rect
                self.images = info.images
                
                pygame.sprite.Sprite.__init__()
                
                if len(custominfo) > 0:
                        print ( "www Modules.Object.CustomObjects.GenericObject.GenericObjectPart.__init__ custom info for generic object" )
                
         def collision(self, part):
                pass
        
         def event(self, c):
                '''
                Every tick of the game this function will be called if registered in the World to process such
                '''
